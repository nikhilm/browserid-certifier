#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const path = require('path');

// ./ is our current working directory
process.chdir(path.dirname(__dirname));

require('../lib/logging-config.js');

const 
unhtml = require('unhtml'),
xmpp = require('node-xmpp'),
stream = require('stream'),
Deserializer = new require('xmlrpc/lib/deserializer'),
config = require('../lib/config.js'),
certify = require('../lib/certify.js'),
keys = require('../lib/keys');

var component = new xmpp.Component({
                  jid: config.get('jid'),
                  password: config.get('password'),
                  host: config.get('host'),
                  port: config.get('port')
                });

component.on('online', function() {
  console.log("Online");
});

component.on('stanza', function(stanza) {
  if (stanza.is('iq') && stanza.attrs.type === 'set') {
    var q = stanza.getChild('query', 'jabber:iq:rpc');
    if (!q) {
      console.err("No RPC query tag");
      // TODO: error
      return;
    }

    var methodCall = q.getChild('methodCall');
    if (!methodCall) {
      console.err("No methodCall tag");
      // TODO: error
      return;
    }

    var pt = new stream.PassThrough();
    var deserializer = new Deserializer();
    deserializer.deserializeMethodCall(pt, function(err, methodName, args) {
      if (err) {
        // TODO: error
        console.err(err);
        return;
      }
      if (methodName !== 'getSignedCertificate') {
        console.err("Wrong method name " + methodName);
      }
      if (args.length < 2) {
        console.err("Too few args " + args);
        return;
      }

      var email = args[0];
      if (typeof email !== 'string') {
        console.err("email is not a string");
        return;
      }

      var pubkey = args[1];
      if (typeof pubkey !== 'string') {
        console.err("pubkey is not a string");
        return;
      }

      var duration = config.get('certificate_validity_ms');
      if (args.length >= 3 && typeof args[2] == 'number') {
        duration = args[2];
      }

      certify({
        email: email,
        pubkey: unhtml(pubkey), // unhtml() undoes the effects of XML serialization on JSON.
        duration: duration,
        hostname: config.get('issuer_hostname')
      }, function(err, certificate) {
        if (err) {
          console.err("certify() error: ", err);
          return;
        }

        var rep = new xmpp.Element('iq', {
            type: 'result',
            id: stanza.attrs.id,
            to: stanza.attrs.from,
            from: stanza.attrs.to
          }).
          c('query', {xmlns: 'jabber:iq:rpc'}).
            c('methodResponse').
              c('params').
                c('param').
                  c('value').
                    c('string').t(certificate);

        component.send(rep);
      });
    });

    pt.write(methodCall.toString());
    pt.end();
  }
});

component.on('error', function(e) {
  console.error(e);
});
